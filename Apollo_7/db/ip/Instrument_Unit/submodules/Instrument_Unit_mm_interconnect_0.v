// Instrument_Unit_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.1 190 at 2015.05.07.21:21:39

`timescale 1 ps / 1 ps
module Instrument_Unit_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0] hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire        hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire        hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0] hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [31:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [3:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire        hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire        hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire        hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0] hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]  hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire        hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire        hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0] hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0] hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire        hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire        hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0] hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [31:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]  hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire        hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire        hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire        hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire        clk_0_clk_clk,                                                    //                                                  clk_0_clk.clk
		input  wire        hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        mem_if_ddr3_emif_0_mp_cmd_reset_n_0_reset_bridge_in_reset_reset,  //  mem_if_ddr3_emif_0_mp_cmd_reset_n_0_reset_bridge_in_reset.reset
		input  wire        new_component_0_reset_reset_bridge_in_reset_reset,                //                new_component_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] new_component_0_avalon_master_address,                            //                              new_component_0_avalon_master.address
		output wire        new_component_0_avalon_master_waitrequest,                        //                                                           .waitrequest
		input  wire        new_component_0_avalon_master_chipselect,                         //                                                           .chipselect
		input  wire        new_component_0_avalon_master_read,                               //                                                           .read
		output wire [15:0] new_component_0_avalon_master_readdata,                           //                                                           .readdata
		output wire        new_component_0_avalon_master_readdatavalid,                      //                                                           .readdatavalid
		input  wire        new_component_0_avalon_master_write,                              //                                                           .write
		input  wire [15:0] new_component_0_avalon_master_writedata,                          //                                                           .writedata
		input  wire        new_component_0_avalon_master_lock,                               //                                                           .lock
		output wire [27:0] mem_if_ddr3_emif_0_avl_0_address,                                 //                                   mem_if_ddr3_emif_0_avl_0.address
		output wire        mem_if_ddr3_emif_0_avl_0_write,                                   //                                                           .write
		output wire        mem_if_ddr3_emif_0_avl_0_read,                                    //                                                           .read
		input  wire [31:0] mem_if_ddr3_emif_0_avl_0_readdata,                                //                                                           .readdata
		output wire [31:0] mem_if_ddr3_emif_0_avl_0_writedata,                               //                                                           .writedata
		output wire        mem_if_ddr3_emif_0_avl_0_beginbursttransfer,                      //                                                           .beginbursttransfer
		output wire [2:0]  mem_if_ddr3_emif_0_avl_0_burstcount,                              //                                                           .burstcount
		output wire [3:0]  mem_if_ddr3_emif_0_avl_0_byteenable,                              //                                                           .byteenable
		input  wire        mem_if_ddr3_emif_0_avl_0_readdatavalid,                           //                                                           .readdatavalid
		input  wire        mem_if_ddr3_emif_0_avl_0_waitrequest                              //                                                           .waitrequest
	);

	wire          rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [122:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                                // hps_0_h2f_axi_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                            // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [122:0] rsp_mux_001_src_data;                                                             // rsp_mux_001:src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                                            // hps_0_h2f_axi_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                                          // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                    // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                      // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          new_component_0_avalon_master_translator_avalon_universal_master_0_waitrequest;   // new_component_0_avalon_master_agent:av_waitrequest -> new_component_0_avalon_master_translator:uav_waitrequest
	wire   [15:0] new_component_0_avalon_master_translator_avalon_universal_master_0_readdata;      // new_component_0_avalon_master_agent:av_readdata -> new_component_0_avalon_master_translator:uav_readdata
	wire          new_component_0_avalon_master_translator_avalon_universal_master_0_debugaccess;   // new_component_0_avalon_master_translator:uav_debugaccess -> new_component_0_avalon_master_agent:av_debugaccess
	wire   [31:0] new_component_0_avalon_master_translator_avalon_universal_master_0_address;       // new_component_0_avalon_master_translator:uav_address -> new_component_0_avalon_master_agent:av_address
	wire          new_component_0_avalon_master_translator_avalon_universal_master_0_read;          // new_component_0_avalon_master_translator:uav_read -> new_component_0_avalon_master_agent:av_read
	wire    [1:0] new_component_0_avalon_master_translator_avalon_universal_master_0_byteenable;    // new_component_0_avalon_master_translator:uav_byteenable -> new_component_0_avalon_master_agent:av_byteenable
	wire          new_component_0_avalon_master_translator_avalon_universal_master_0_readdatavalid; // new_component_0_avalon_master_agent:av_readdatavalid -> new_component_0_avalon_master_translator:uav_readdatavalid
	wire          new_component_0_avalon_master_translator_avalon_universal_master_0_lock;          // new_component_0_avalon_master_translator:uav_lock -> new_component_0_avalon_master_agent:av_lock
	wire          new_component_0_avalon_master_translator_avalon_universal_master_0_write;         // new_component_0_avalon_master_translator:uav_write -> new_component_0_avalon_master_agent:av_write
	wire   [15:0] new_component_0_avalon_master_translator_avalon_universal_master_0_writedata;     // new_component_0_avalon_master_translator:uav_writedata -> new_component_0_avalon_master_agent:av_writedata
	wire    [1:0] new_component_0_avalon_master_translator_avalon_universal_master_0_burstcount;    // new_component_0_avalon_master_translator:uav_burstcount -> new_component_0_avalon_master_agent:av_burstcount
	wire   [31:0] mem_if_ddr3_emif_0_avl_0_agent_m0_readdata;                                       // mem_if_ddr3_emif_0_avl_0_translator:uav_readdata -> mem_if_ddr3_emif_0_avl_0_agent:m0_readdata
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_waitrequest;                                    // mem_if_ddr3_emif_0_avl_0_translator:uav_waitrequest -> mem_if_ddr3_emif_0_avl_0_agent:m0_waitrequest
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_debugaccess;                                    // mem_if_ddr3_emif_0_avl_0_agent:m0_debugaccess -> mem_if_ddr3_emif_0_avl_0_translator:uav_debugaccess
	wire   [31:0] mem_if_ddr3_emif_0_avl_0_agent_m0_address;                                        // mem_if_ddr3_emif_0_avl_0_agent:m0_address -> mem_if_ddr3_emif_0_avl_0_translator:uav_address
	wire    [3:0] mem_if_ddr3_emif_0_avl_0_agent_m0_byteenable;                                     // mem_if_ddr3_emif_0_avl_0_agent:m0_byteenable -> mem_if_ddr3_emif_0_avl_0_translator:uav_byteenable
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_read;                                           // mem_if_ddr3_emif_0_avl_0_agent:m0_read -> mem_if_ddr3_emif_0_avl_0_translator:uav_read
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_readdatavalid;                                  // mem_if_ddr3_emif_0_avl_0_translator:uav_readdatavalid -> mem_if_ddr3_emif_0_avl_0_agent:m0_readdatavalid
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_lock;                                           // mem_if_ddr3_emif_0_avl_0_agent:m0_lock -> mem_if_ddr3_emif_0_avl_0_translator:uav_lock
	wire   [31:0] mem_if_ddr3_emif_0_avl_0_agent_m0_writedata;                                      // mem_if_ddr3_emif_0_avl_0_agent:m0_writedata -> mem_if_ddr3_emif_0_avl_0_translator:uav_writedata
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_write;                                          // mem_if_ddr3_emif_0_avl_0_agent:m0_write -> mem_if_ddr3_emif_0_avl_0_translator:uav_write
	wire    [4:0] mem_if_ddr3_emif_0_avl_0_agent_m0_burstcount;                                     // mem_if_ddr3_emif_0_avl_0_agent:m0_burstcount -> mem_if_ddr3_emif_0_avl_0_translator:uav_burstcount
	wire          mem_if_ddr3_emif_0_avl_0_agent_rf_source_valid;                                   // mem_if_ddr3_emif_0_avl_0_agent:rf_source_valid -> mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:in_valid
	wire  [123:0] mem_if_ddr3_emif_0_avl_0_agent_rf_source_data;                                    // mem_if_ddr3_emif_0_avl_0_agent:rf_source_data -> mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:in_data
	wire          mem_if_ddr3_emif_0_avl_0_agent_rf_source_ready;                                   // mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:in_ready -> mem_if_ddr3_emif_0_avl_0_agent:rf_source_ready
	wire          mem_if_ddr3_emif_0_avl_0_agent_rf_source_startofpacket;                           // mem_if_ddr3_emif_0_avl_0_agent:rf_source_startofpacket -> mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:in_startofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rf_source_endofpacket;                             // mem_if_ddr3_emif_0_avl_0_agent:rf_source_endofpacket -> mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:in_endofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_valid;                                // mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:out_valid -> mem_if_ddr3_emif_0_avl_0_agent:rf_sink_valid
	wire  [123:0] mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_data;                                 // mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:out_data -> mem_if_ddr3_emif_0_avl_0_agent:rf_sink_data
	wire          mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_ready;                                // mem_if_ddr3_emif_0_avl_0_agent:rf_sink_ready -> mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:out_ready
	wire          mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_startofpacket;                        // mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:out_startofpacket -> mem_if_ddr3_emif_0_avl_0_agent:rf_sink_startofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_endofpacket;                          // mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:out_endofpacket -> mem_if_ddr3_emif_0_avl_0_agent:rf_sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_valid;                              // mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_src_valid -> mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo:in_valid
	wire   [33:0] mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_data;                               // mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_src_data -> mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo:in_data
	wire          mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_ready;                              // mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo:in_ready -> mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_src_ready
	wire          mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_out_valid;                              // mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo:out_valid -> mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_out_data;                               // mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo:out_data -> mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_sink_data
	wire          mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_out_ready;                              // mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_sink_ready -> mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo:out_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                        // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [122:0] hps_0_h2f_axi_master_agent_write_cp_data;                                         // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                        // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                                // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                                  // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                 // router:src_valid -> cmd_demux:sink_valid
	wire  [122:0] router_src_data;                                                                  // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                 // cmd_demux:sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                         // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [122:0] hps_0_h2f_axi_master_agent_read_cp_data;                                          // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                         // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                                 // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                                   // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                             // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [122:0] router_001_src_data;                                                              // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                             // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                           // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          new_component_0_avalon_master_agent_cp_valid;                                     // new_component_0_avalon_master_agent:cp_valid -> router_002:sink_valid
	wire  [104:0] new_component_0_avalon_master_agent_cp_data;                                      // new_component_0_avalon_master_agent:cp_data -> router_002:sink_data
	wire          new_component_0_avalon_master_agent_cp_ready;                                     // router_002:sink_ready -> new_component_0_avalon_master_agent:cp_ready
	wire          new_component_0_avalon_master_agent_cp_startofpacket;                             // new_component_0_avalon_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          new_component_0_avalon_master_agent_cp_endofpacket;                               // new_component_0_avalon_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rp_valid;                                          // mem_if_ddr3_emif_0_avl_0_agent:rp_valid -> router_003:sink_valid
	wire  [122:0] mem_if_ddr3_emif_0_avl_0_agent_rp_data;                                           // mem_if_ddr3_emif_0_avl_0_agent:rp_data -> router_003:sink_data
	wire          mem_if_ddr3_emif_0_avl_0_agent_rp_ready;                                          // router_003:sink_ready -> mem_if_ddr3_emif_0_avl_0_agent:rp_ready
	wire          mem_if_ddr3_emif_0_avl_0_agent_rp_startofpacket;                                  // mem_if_ddr3_emif_0_avl_0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rp_endofpacket;                                    // mem_if_ddr3_emif_0_avl_0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                             // router_003:src_valid -> rsp_demux:sink_valid
	wire  [122:0] router_003_src_data;                                                              // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                             // rsp_demux:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                           // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> mem_if_ddr3_emif_0_avl_0_burst_adapter:sink0_valid
	wire  [122:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> mem_if_ddr3_emif_0_avl_0_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                // mem_if_ddr3_emif_0_avl_0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> mem_if_ddr3_emif_0_avl_0_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> mem_if_ddr3_emif_0_avl_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> mem_if_ddr3_emif_0_avl_0_burst_adapter:sink0_endofpacket
	wire          mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_valid;                             // mem_if_ddr3_emif_0_avl_0_burst_adapter:source0_valid -> mem_if_ddr3_emif_0_avl_0_agent:cp_valid
	wire  [122:0] mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_data;                              // mem_if_ddr3_emif_0_avl_0_burst_adapter:source0_data -> mem_if_ddr3_emif_0_avl_0_agent:cp_data
	wire          mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_ready;                             // mem_if_ddr3_emif_0_avl_0_agent:cp_ready -> mem_if_ddr3_emif_0_avl_0_burst_adapter:source0_ready
	wire    [2:0] mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_channel;                           // mem_if_ddr3_emif_0_avl_0_burst_adapter:source0_channel -> mem_if_ddr3_emif_0_avl_0_agent:cp_channel
	wire          mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_startofpacket;                     // mem_if_ddr3_emif_0_avl_0_burst_adapter:source0_startofpacket -> mem_if_ddr3_emif_0_avl_0_agent:cp_startofpacket
	wire          mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_endofpacket;                       // mem_if_ddr3_emif_0_avl_0_burst_adapter:source0_endofpacket -> mem_if_ddr3_emif_0_avl_0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [122:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                         // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [122:0] cmd_demux_001_src0_data;                                                          // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                         // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                                       // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                 // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                   // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                         // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [122:0] cmd_demux_002_src0_data;                                                          // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                         // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire    [2:0] cmd_demux_002_src0_channel;                                                       // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                 // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                   // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [122:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                             // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [122:0] rsp_demux_src1_data;                                                              // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                             // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [2:0] rsp_demux_src1_channel;                                                           // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                     // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                       // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                             // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [122:0] rsp_demux_src2_data;                                                              // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                             // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire    [2:0] rsp_demux_src2_channel;                                                           // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                     // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                       // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_mux_002_src_valid;                                                            // rsp_mux_002:src_valid -> new_component_0_avalon_master_rsp_width_adapter:in_valid
	wire  [122:0] rsp_mux_002_src_data;                                                             // rsp_mux_002:src_data -> new_component_0_avalon_master_rsp_width_adapter:in_data
	wire          rsp_mux_002_src_ready;                                                            // new_component_0_avalon_master_rsp_width_adapter:in_ready -> rsp_mux_002:src_ready
	wire    [2:0] rsp_mux_002_src_channel;                                                          // rsp_mux_002:src_channel -> new_component_0_avalon_master_rsp_width_adapter:in_channel
	wire          rsp_mux_002_src_startofpacket;                                                    // rsp_mux_002:src_startofpacket -> new_component_0_avalon_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                      // rsp_mux_002:src_endofpacket -> new_component_0_avalon_master_rsp_width_adapter:in_endofpacket
	wire          new_component_0_avalon_master_rsp_width_adapter_src_valid;                        // new_component_0_avalon_master_rsp_width_adapter:out_valid -> new_component_0_avalon_master_agent:rp_valid
	wire  [104:0] new_component_0_avalon_master_rsp_width_adapter_src_data;                         // new_component_0_avalon_master_rsp_width_adapter:out_data -> new_component_0_avalon_master_agent:rp_data
	wire          new_component_0_avalon_master_rsp_width_adapter_src_ready;                        // new_component_0_avalon_master_agent:rp_ready -> new_component_0_avalon_master_rsp_width_adapter:out_ready
	wire    [2:0] new_component_0_avalon_master_rsp_width_adapter_src_channel;                      // new_component_0_avalon_master_rsp_width_adapter:out_channel -> new_component_0_avalon_master_agent:rp_channel
	wire          new_component_0_avalon_master_rsp_width_adapter_src_startofpacket;                // new_component_0_avalon_master_rsp_width_adapter:out_startofpacket -> new_component_0_avalon_master_agent:rp_startofpacket
	wire          new_component_0_avalon_master_rsp_width_adapter_src_endofpacket;                  // new_component_0_avalon_master_rsp_width_adapter:out_endofpacket -> new_component_0_avalon_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                             // router_002:src_valid -> new_component_0_avalon_master_cmd_width_adapter:in_valid
	wire  [104:0] router_002_src_data;                                                              // router_002:src_data -> new_component_0_avalon_master_cmd_width_adapter:in_data
	wire          router_002_src_ready;                                                             // new_component_0_avalon_master_cmd_width_adapter:in_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                           // router_002:src_channel -> new_component_0_avalon_master_cmd_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> new_component_0_avalon_master_cmd_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> new_component_0_avalon_master_cmd_width_adapter:in_endofpacket
	wire          new_component_0_avalon_master_cmd_width_adapter_src_valid;                        // new_component_0_avalon_master_cmd_width_adapter:out_valid -> cmd_demux_002:sink_valid
	wire  [122:0] new_component_0_avalon_master_cmd_width_adapter_src_data;                         // new_component_0_avalon_master_cmd_width_adapter:out_data -> cmd_demux_002:sink_data
	wire          new_component_0_avalon_master_cmd_width_adapter_src_ready;                        // cmd_demux_002:sink_ready -> new_component_0_avalon_master_cmd_width_adapter:out_ready
	wire    [2:0] new_component_0_avalon_master_cmd_width_adapter_src_channel;                      // new_component_0_avalon_master_cmd_width_adapter:out_channel -> cmd_demux_002:sink_channel
	wire          new_component_0_avalon_master_cmd_width_adapter_src_startofpacket;                // new_component_0_avalon_master_cmd_width_adapter:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          new_component_0_avalon_master_cmd_width_adapter_src_endofpacket;                  // new_component_0_avalon_master_cmd_width_adapter:out_endofpacket -> cmd_demux_002:sink_endofpacket

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) new_component_0_avalon_master_translator (
		.clk                    (clk_0_clk_clk),                                                                    //                       clk.clk
		.reset                  (new_component_0_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (new_component_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (new_component_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (new_component_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (new_component_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (new_component_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (new_component_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (new_component_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (new_component_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (new_component_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (new_component_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (new_component_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (new_component_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (new_component_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (new_component_0_avalon_master_chipselect),                                         //                          .chipselect
		.av_read                (new_component_0_avalon_master_read),                                               //                          .read
		.av_readdata            (new_component_0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (new_component_0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (new_component_0_avalon_master_write),                                              //                          .write
		.av_writedata           (new_component_0_avalon_master_writedata),                                          //                          .writedata
		.av_lock                (new_component_0_avalon_master_lock),                                               //                          .lock
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_byteenable          (2'b11),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (28),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mem_if_ddr3_emif_0_avl_0_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (new_component_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mem_if_ddr3_emif_0_avl_0_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (mem_if_ddr3_emif_0_avl_0_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (mem_if_ddr3_emif_0_avl_0_agent_m0_read),            //                         .read
		.uav_write              (mem_if_ddr3_emif_0_avl_0_agent_m0_write),           //                         .write
		.uav_waitrequest        (mem_if_ddr3_emif_0_avl_0_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (mem_if_ddr3_emif_0_avl_0_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (mem_if_ddr3_emif_0_avl_0_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (mem_if_ddr3_emif_0_avl_0_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (mem_if_ddr3_emif_0_avl_0_agent_m0_writedata),       //                         .writedata
		.uav_lock               (mem_if_ddr3_emif_0_avl_0_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (mem_if_ddr3_emif_0_avl_0_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (mem_if_ddr3_emif_0_avl_0_address),                  //      avalon_anti_slave_0.address
		.av_write               (mem_if_ddr3_emif_0_avl_0_write),                    //                         .write
		.av_read                (mem_if_ddr3_emif_0_avl_0_read),                     //                         .read
		.av_readdata            (mem_if_ddr3_emif_0_avl_0_readdata),                 //                         .readdata
		.av_writedata           (mem_if_ddr3_emif_0_avl_0_writedata),                //                         .writedata
		.av_beginbursttransfer  (mem_if_ddr3_emif_0_avl_0_beginbursttransfer),       //                         .beginbursttransfer
		.av_burstcount          (mem_if_ddr3_emif_0_avl_0_burstcount),               //                         .burstcount
		.av_byteenable          (mem_if_ddr3_emif_0_avl_0_byteenable),               //                         .byteenable
		.av_readdatavalid       (mem_if_ddr3_emif_0_avl_0_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (mem_if_ddr3_emif_0_avl_0_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                                  //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (95),
		.PKT_CACHE_H               (117),
		.PKT_CACHE_L               (114),
		.PKT_ADDR_SIDEBAND_H       (93),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (98),
		.PKT_THREAD_ID_H           (110),
		.PKT_THREAD_ID_L           (99),
		.PKT_QOS_L                 (96),
		.PKT_QOS_H                 (96),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_DATA_SIDEBAND_H       (94),
		.PKT_DATA_SIDEBAND_L       (94),
		.ST_DATA_W                 (123),
		.ST_CHANNEL_W              (3),
		.ID                        (0)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                 //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                  //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                               //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                         //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                           //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                 //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                             //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                              //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                           //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                     //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                       //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                             //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_QOS_H                 (78),
		.PKT_QOS_L                 (78),
		.PKT_DATA_SIDEBAND_H       (76),
		.PKT_DATA_SIDEBAND_L       (76),
		.PKT_ADDR_SIDEBAND_H       (75),
		.PKT_ADDR_SIDEBAND_L       (75),
		.PKT_BURST_TYPE_H          (74),
		.PKT_BURST_TYPE_L          (73),
		.PKT_CACHE_H               (99),
		.PKT_CACHE_L               (96),
		.PKT_THREAD_ID_H           (92),
		.PKT_THREAD_ID_L           (81),
		.PKT_BURST_SIZE_H          (72),
		.PKT_BURST_SIZE_L          (70),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (77),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (69),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (79),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (80),
		.ST_DATA_W                 (105),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) new_component_0_avalon_master_agent (
		.clk                   (clk_0_clk_clk),                                                                    //       clk.clk
		.reset                 (new_component_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (new_component_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (new_component_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (new_component_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (new_component_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (new_component_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (new_component_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (new_component_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (new_component_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (new_component_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (new_component_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (new_component_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (new_component_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (new_component_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (new_component_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (new_component_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (new_component_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (new_component_0_avalon_master_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (new_component_0_avalon_master_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (new_component_0_avalon_master_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (new_component_0_avalon_master_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (new_component_0_avalon_master_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (new_component_0_avalon_master_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (97),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (98),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (123),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mem_if_ddr3_emif_0_avl_0_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (new_component_0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (mem_if_ddr3_emif_0_avl_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (mem_if_ddr3_emif_0_avl_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (mem_if_ddr3_emif_0_avl_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (mem_if_ddr3_emif_0_avl_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (mem_if_ddr3_emif_0_avl_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (mem_if_ddr3_emif_0_avl_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (mem_if_ddr3_emif_0_avl_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (mem_if_ddr3_emif_0_avl_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (mem_if_ddr3_emif_0_avl_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (mem_if_ddr3_emif_0_avl_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (mem_if_ddr3_emif_0_avl_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (mem_if_ddr3_emif_0_avl_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (mem_if_ddr3_emif_0_avl_0_agent_rp_ready),                      //                .ready
		.rp_valid                (mem_if_ddr3_emif_0_avl_0_agent_rp_valid),                      //                .valid
		.rp_data                 (mem_if_ddr3_emif_0_avl_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (mem_if_ddr3_emif_0_avl_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (mem_if_ddr3_emif_0_avl_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (mem_if_ddr3_emif_0_avl_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (mem_if_ddr3_emif_0_avl_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (mem_if_ddr3_emif_0_avl_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (mem_if_ddr3_emif_0_avl_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (124),
		.FIFO_DEPTH          (49),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (new_component_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_avl_0_agent_rf_source_data),             //        in.data
		.in_valid          (mem_if_ddr3_emif_0_avl_0_agent_rf_source_valid),            //          .valid
		.in_ready          (mem_if_ddr3_emif_0_avl_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mem_if_ddr3_emif_0_avl_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mem_if_ddr3_emif_0_avl_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (new_component_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	Instrument_Unit_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	Instrument_Unit_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	Instrument_Unit_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (new_component_0_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (new_component_0_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (new_component_0_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (new_component_0_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (new_component_0_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (new_component_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	Instrument_Unit_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (mem_if_ddr3_emif_0_avl_0_agent_rp_ready),           //      sink.ready
		.sink_valid         (mem_if_ddr3_emif_0_avl_0_agent_rp_valid),           //          .valid
		.sink_data          (mem_if_ddr3_emif_0_avl_0_agent_rp_data),            //          .data
		.sink_startofpacket (mem_if_ddr3_emif_0_avl_0_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_0_avl_0_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (new_component_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (123),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) mem_if_ddr3_emif_0_avl_0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                //       cr0.clk
		.reset                 (new_component_0_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                            //          .ready
		.source0_valid         (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mem_if_ddr3_emif_0_avl_0_burst_adapter_source0_ready)          //          .ready
	);

	Instrument_Unit_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                 //      sink.ready
		.sink_channel       (router_src_channel),                                               //          .channel
		.sink_data          (router_src_data),                                                  //          .data
		.sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.sink_valid         (router_src_valid),                                                 //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                             //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //          .valid
		.src0_data          (cmd_demux_src0_data),                                              //          .data
		.src0_channel       (cmd_demux_src0_channel),                                           //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                        //          .endofpacket
	);

	Instrument_Unit_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                             //      sink.ready
		.sink_channel       (router_001_src_channel),                                           //          .channel
		.sink_data          (router_001_src_data),                                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                                             //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                    //          .endofpacket
	);

	Instrument_Unit_mm_interconnect_0_cmd_demux cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                                     //       clk.clk
		.reset              (new_component_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.sink_ready         (new_component_0_avalon_master_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (new_component_0_avalon_master_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (new_component_0_avalon_master_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (new_component_0_avalon_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (new_component_0_avalon_master_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (new_component_0_avalon_master_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                          //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                          //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                           //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                        //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                                  //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                                     //          .endofpacket
	);

	Instrument_Unit_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (new_component_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_src_valid),                                 //          .valid
		.src_data            (cmd_mux_src_data),                                  //          .data
		.src_channel         (cmd_mux_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                            //          .channel
		.sink0_data          (cmd_demux_src0_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                    //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                          //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                          //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                        //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                           //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                  //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                     //          .endofpacket
	);

	Instrument_Unit_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (new_component_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                              //      sink.ready
		.sink_channel       (router_003_src_channel),                            //          .channel
		.sink_data          (router_003_src_data),                               //          .data
		.sink_startofpacket (router_003_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_003_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_src0_data),                               //          .data
		.src0_channel       (rsp_demux_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_src1_data),                               //          .data
		.src1_channel       (rsp_demux_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                        //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                              //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                              //          .valid
		.src2_data          (rsp_demux_src2_data),                               //          .data
		.src2_channel       (rsp_demux_src2_channel),                            //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                      //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                         //          .endofpacket
	);

	Instrument_Unit_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                //          .valid
		.src_data            (rsp_mux_src_data),                                                 //          .data
		.src_channel         (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                             //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                             //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                           //          .channel
		.sink0_data          (rsp_demux_src0_data),                                              //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                        //          .endofpacket
	);

	Instrument_Unit_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                            //          .valid
		.src_data            (rsp_mux_001_src_data),                                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                             //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                             //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                           //          .channel
		.sink0_data          (rsp_demux_src1_data),                                              //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                        //          .endofpacket
	);

	Instrument_Unit_mm_interconnect_0_rsp_mux rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (new_component_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                             //          .valid
		.src_data            (rsp_mux_002_src_data),                              //          .data
		.src_channel         (rsp_mux_002_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                              //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                              //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                            //          .channel
		.sink0_data          (rsp_demux_src2_data),                               //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)                         //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (119),
		.IN_PKT_RESPONSE_STATUS_L      (118),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (120),
		.IN_PKT_ORI_BURST_SIZE_H       (122),
		.IN_ST_DATA_W                  (123),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (72),
		.OUT_PKT_BURST_SIZE_L          (70),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (74),
		.OUT_PKT_BURST_TYPE_L          (73),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) new_component_0_avalon_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                     //       clk.clk
		.reset                (new_component_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (rsp_mux_002_src_valid),                                             //      sink.valid
		.in_channel           (rsp_mux_002_src_channel),                                           //          .channel
		.in_startofpacket     (rsp_mux_002_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (rsp_mux_002_src_endofpacket),                                       //          .endofpacket
		.in_ready             (rsp_mux_002_src_ready),                                             //          .ready
		.in_data              (rsp_mux_002_src_data),                                              //          .data
		.out_endofpacket      (new_component_0_avalon_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (new_component_0_avalon_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (new_component_0_avalon_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (new_component_0_avalon_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (new_component_0_avalon_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (new_component_0_avalon_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (69),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (72),
		.IN_PKT_BURST_SIZE_L           (70),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (74),
		.IN_PKT_BURST_TYPE_L           (73),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (119),
		.OUT_PKT_RESPONSE_STATUS_L     (118),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (120),
		.OUT_PKT_ORI_BURST_SIZE_H      (122),
		.OUT_ST_DATA_W                 (123),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) new_component_0_avalon_master_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                     //       clk.clk
		.reset                (new_component_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (router_002_src_valid),                                              //      sink.valid
		.in_channel           (router_002_src_channel),                                            //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                        //          .endofpacket
		.in_ready             (router_002_src_ready),                                              //          .ready
		.in_data              (router_002_src_data),                                               //          .data
		.out_endofpacket      (new_component_0_avalon_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (new_component_0_avalon_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (new_component_0_avalon_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (new_component_0_avalon_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (new_component_0_avalon_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (new_component_0_avalon_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

endmodule
