// god_bless_apollo_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.1 190 at 2015.06.02.11:08:18

`timescale 1 ps / 1 ps
module god_bless_apollo_mm_interconnect_0 (
		input  wire        pll_0_outclk1_clk,                                                 //                                               pll_0_outclk1.clk
		input  wire        Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset, // Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset.reset
		input  wire        mem_if_ddr3_emif_0_mp_cmd_reset_n_0_reset_bridge_in_reset_reset,   //   mem_if_ddr3_emif_0_mp_cmd_reset_n_0_reset_bridge_in_reset.reset
		input  wire [31:0] Apollo_VIdeo_Processment_Unit_0_avalon_master_address,             //               Apollo_VIdeo_Processment_Unit_0_avalon_master.address
		output wire        Apollo_VIdeo_Processment_Unit_0_avalon_master_waitrequest,         //                                                            .waitrequest
		input  wire        Apollo_VIdeo_Processment_Unit_0_avalon_master_read,                //                                                            .read
		output wire [31:0] Apollo_VIdeo_Processment_Unit_0_avalon_master_readdata,            //                                                            .readdata
		output wire [27:0] mem_if_ddr3_emif_0_avl_0_address,                                  //                                    mem_if_ddr3_emif_0_avl_0.address
		output wire        mem_if_ddr3_emif_0_avl_0_write,                                    //                                                            .write
		output wire        mem_if_ddr3_emif_0_avl_0_read,                                     //                                                            .read
		input  wire [31:0] mem_if_ddr3_emif_0_avl_0_readdata,                                 //                                                            .readdata
		output wire [31:0] mem_if_ddr3_emif_0_avl_0_writedata,                                //                                                            .writedata
		output wire        mem_if_ddr3_emif_0_avl_0_beginbursttransfer,                       //                                                            .beginbursttransfer
		output wire [2:0]  mem_if_ddr3_emif_0_avl_0_burstcount,                               //                                                            .burstcount
		output wire [3:0]  mem_if_ddr3_emif_0_avl_0_byteenable,                               //                                                            .byteenable
		input  wire        mem_if_ddr3_emif_0_avl_0_readdatavalid,                            //                                                            .readdatavalid
		input  wire        mem_if_ddr3_emif_0_avl_0_waitrequest                               //                                                            .waitrequest
	);

	wire          apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_waitrequest;   // Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:av_waitrequest -> Apollo_VIdeo_Processment_Unit_0_avalon_master_translator:uav_waitrequest
	wire   [31:0] apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_readdata;      // Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:av_readdata -> Apollo_VIdeo_Processment_Unit_0_avalon_master_translator:uav_readdata
	wire          apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_debugaccess;   // Apollo_VIdeo_Processment_Unit_0_avalon_master_translator:uav_debugaccess -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:av_debugaccess
	wire   [31:0] apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_address;       // Apollo_VIdeo_Processment_Unit_0_avalon_master_translator:uav_address -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:av_address
	wire          apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_read;          // Apollo_VIdeo_Processment_Unit_0_avalon_master_translator:uav_read -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:av_read
	wire    [3:0] apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_byteenable;    // Apollo_VIdeo_Processment_Unit_0_avalon_master_translator:uav_byteenable -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:av_byteenable
	wire          apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_readdatavalid; // Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:av_readdatavalid -> Apollo_VIdeo_Processment_Unit_0_avalon_master_translator:uav_readdatavalid
	wire          apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_lock;          // Apollo_VIdeo_Processment_Unit_0_avalon_master_translator:uav_lock -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:av_lock
	wire          apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_write;         // Apollo_VIdeo_Processment_Unit_0_avalon_master_translator:uav_write -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:av_write
	wire   [31:0] apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_writedata;     // Apollo_VIdeo_Processment_Unit_0_avalon_master_translator:uav_writedata -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:av_writedata
	wire    [2:0] apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_burstcount;    // Apollo_VIdeo_Processment_Unit_0_avalon_master_translator:uav_burstcount -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                                // rsp_mux:src_valid -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:rp_valid
	wire  [103:0] rsp_mux_src_data;                                                                                 // rsp_mux:src_data -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                                // Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                                              // rsp_mux:src_channel -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                        // rsp_mux:src_startofpacket -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                          // rsp_mux:src_endofpacket -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:rp_endofpacket
	wire   [31:0] mem_if_ddr3_emif_0_avl_0_agent_m0_readdata;                                                       // mem_if_ddr3_emif_0_avl_0_translator:uav_readdata -> mem_if_ddr3_emif_0_avl_0_agent:m0_readdata
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_waitrequest;                                                    // mem_if_ddr3_emif_0_avl_0_translator:uav_waitrequest -> mem_if_ddr3_emif_0_avl_0_agent:m0_waitrequest
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_debugaccess;                                                    // mem_if_ddr3_emif_0_avl_0_agent:m0_debugaccess -> mem_if_ddr3_emif_0_avl_0_translator:uav_debugaccess
	wire   [31:0] mem_if_ddr3_emif_0_avl_0_agent_m0_address;                                                        // mem_if_ddr3_emif_0_avl_0_agent:m0_address -> mem_if_ddr3_emif_0_avl_0_translator:uav_address
	wire    [3:0] mem_if_ddr3_emif_0_avl_0_agent_m0_byteenable;                                                     // mem_if_ddr3_emif_0_avl_0_agent:m0_byteenable -> mem_if_ddr3_emif_0_avl_0_translator:uav_byteenable
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_read;                                                           // mem_if_ddr3_emif_0_avl_0_agent:m0_read -> mem_if_ddr3_emif_0_avl_0_translator:uav_read
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_readdatavalid;                                                  // mem_if_ddr3_emif_0_avl_0_translator:uav_readdatavalid -> mem_if_ddr3_emif_0_avl_0_agent:m0_readdatavalid
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_lock;                                                           // mem_if_ddr3_emif_0_avl_0_agent:m0_lock -> mem_if_ddr3_emif_0_avl_0_translator:uav_lock
	wire   [31:0] mem_if_ddr3_emif_0_avl_0_agent_m0_writedata;                                                      // mem_if_ddr3_emif_0_avl_0_agent:m0_writedata -> mem_if_ddr3_emif_0_avl_0_translator:uav_writedata
	wire          mem_if_ddr3_emif_0_avl_0_agent_m0_write;                                                          // mem_if_ddr3_emif_0_avl_0_agent:m0_write -> mem_if_ddr3_emif_0_avl_0_translator:uav_write
	wire    [4:0] mem_if_ddr3_emif_0_avl_0_agent_m0_burstcount;                                                     // mem_if_ddr3_emif_0_avl_0_agent:m0_burstcount -> mem_if_ddr3_emif_0_avl_0_translator:uav_burstcount
	wire          mem_if_ddr3_emif_0_avl_0_agent_rf_source_valid;                                                   // mem_if_ddr3_emif_0_avl_0_agent:rf_source_valid -> mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:in_valid
	wire  [104:0] mem_if_ddr3_emif_0_avl_0_agent_rf_source_data;                                                    // mem_if_ddr3_emif_0_avl_0_agent:rf_source_data -> mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:in_data
	wire          mem_if_ddr3_emif_0_avl_0_agent_rf_source_ready;                                                   // mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:in_ready -> mem_if_ddr3_emif_0_avl_0_agent:rf_source_ready
	wire          mem_if_ddr3_emif_0_avl_0_agent_rf_source_startofpacket;                                           // mem_if_ddr3_emif_0_avl_0_agent:rf_source_startofpacket -> mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:in_startofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rf_source_endofpacket;                                             // mem_if_ddr3_emif_0_avl_0_agent:rf_source_endofpacket -> mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:in_endofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_valid;                                                // mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:out_valid -> mem_if_ddr3_emif_0_avl_0_agent:rf_sink_valid
	wire  [104:0] mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_data;                                                 // mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:out_data -> mem_if_ddr3_emif_0_avl_0_agent:rf_sink_data
	wire          mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_ready;                                                // mem_if_ddr3_emif_0_avl_0_agent:rf_sink_ready -> mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:out_ready
	wire          mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_startofpacket;                                        // mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:out_startofpacket -> mem_if_ddr3_emif_0_avl_0_agent:rf_sink_startofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_endofpacket;                                          // mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo:out_endofpacket -> mem_if_ddr3_emif_0_avl_0_agent:rf_sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_valid;                                              // mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_src_valid -> mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_data;                                               // mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_src_data -> mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_sink_data
	wire          mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_ready;                                              // mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_sink_ready -> mem_if_ddr3_emif_0_avl_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                                // cmd_mux:src_valid -> mem_if_ddr3_emif_0_avl_0_agent:cp_valid
	wire  [103:0] cmd_mux_src_data;                                                                                 // cmd_mux:src_data -> mem_if_ddr3_emif_0_avl_0_agent:cp_data
	wire          cmd_mux_src_ready;                                                                                // mem_if_ddr3_emif_0_avl_0_agent:cp_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                                              // cmd_mux:src_channel -> mem_if_ddr3_emif_0_avl_0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                        // cmd_mux:src_startofpacket -> mem_if_ddr3_emif_0_avl_0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                          // cmd_mux:src_endofpacket -> mem_if_ddr3_emif_0_avl_0_agent:cp_endofpacket
	wire          apollo_video_processment_unit_0_avalon_master_agent_cp_valid;                                     // Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [103:0] apollo_video_processment_unit_0_avalon_master_agent_cp_data;                                      // Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:cp_data -> router:sink_data
	wire          apollo_video_processment_unit_0_avalon_master_agent_cp_ready;                                     // router:sink_ready -> Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:cp_ready
	wire          apollo_video_processment_unit_0_avalon_master_agent_cp_startofpacket;                             // Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          apollo_video_processment_unit_0_avalon_master_agent_cp_endofpacket;                               // Apollo_VIdeo_Processment_Unit_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                                 // router:src_valid -> cmd_demux:sink_valid
	wire  [103:0] router_src_data;                                                                                  // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                                 // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rp_valid;                                                          // mem_if_ddr3_emif_0_avl_0_agent:rp_valid -> router_001:sink_valid
	wire  [103:0] mem_if_ddr3_emif_0_avl_0_agent_rp_data;                                                           // mem_if_ddr3_emif_0_avl_0_agent:rp_data -> router_001:sink_data
	wire          mem_if_ddr3_emif_0_avl_0_agent_rp_ready;                                                          // router_001:sink_ready -> mem_if_ddr3_emif_0_avl_0_agent:rp_ready
	wire          mem_if_ddr3_emif_0_avl_0_agent_rp_startofpacket;                                                  // mem_if_ddr3_emif_0_avl_0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          mem_if_ddr3_emif_0_avl_0_agent_rp_endofpacket;                                                    // mem_if_ddr3_emif_0_avl_0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                             // router_001:src_valid -> rsp_demux:sink_valid
	wire  [103:0] router_001_src_data;                                                                              // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                                             // rsp_demux:sink_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                                           // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                                     // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                       // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [103:0] cmd_demux_src0_data;                                                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [103:0] rsp_demux_src0_data;                                                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) apollo_video_processment_unit_0_avalon_master_translator (
		.clk                    (pll_0_outclk1_clk),                                                                                //                       clk.clk
		.reset                  (Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Apollo_VIdeo_Processment_Unit_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Apollo_VIdeo_Processment_Unit_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Apollo_VIdeo_Processment_Unit_0_avalon_master_read),                                               //                          .read
		.av_readdata            (Apollo_VIdeo_Processment_Unit_0_avalon_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                                                 //               (terminated)
		.av_write               (1'b0),                                                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                             //               (terminated)
		.av_lock                (1'b0),                                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                                             //               (terminated)
		.uav_clken              (),                                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                                            //               (terminated)
		.av_response            (),                                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (28),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mem_if_ddr3_emif_0_avl_0_translator (
		.clk                    (pll_0_outclk1_clk),                                                 //                      clk.clk
		.reset                  (Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mem_if_ddr3_emif_0_avl_0_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (mem_if_ddr3_emif_0_avl_0_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (mem_if_ddr3_emif_0_avl_0_agent_m0_read),                            //                         .read
		.uav_write              (mem_if_ddr3_emif_0_avl_0_agent_m0_write),                           //                         .write
		.uav_waitrequest        (mem_if_ddr3_emif_0_avl_0_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (mem_if_ddr3_emif_0_avl_0_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (mem_if_ddr3_emif_0_avl_0_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (mem_if_ddr3_emif_0_avl_0_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (mem_if_ddr3_emif_0_avl_0_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (mem_if_ddr3_emif_0_avl_0_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (mem_if_ddr3_emif_0_avl_0_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (mem_if_ddr3_emif_0_avl_0_address),                                  //      avalon_anti_slave_0.address
		.av_write               (mem_if_ddr3_emif_0_avl_0_write),                                    //                         .write
		.av_read                (mem_if_ddr3_emif_0_avl_0_read),                                     //                         .read
		.av_readdata            (mem_if_ddr3_emif_0_avl_0_readdata),                                 //                         .readdata
		.av_writedata           (mem_if_ddr3_emif_0_avl_0_writedata),                                //                         .writedata
		.av_beginbursttransfer  (mem_if_ddr3_emif_0_avl_0_beginbursttransfer),                       //                         .beginbursttransfer
		.av_burstcount          (mem_if_ddr3_emif_0_avl_0_burstcount),                               //                         .burstcount
		.av_byteenable          (mem_if_ddr3_emif_0_avl_0_byteenable),                               //                         .byteenable
		.av_readdatavalid       (mem_if_ddr3_emif_0_avl_0_readdatavalid),                            //                         .readdatavalid
		.av_waitrequest         (mem_if_ddr3_emif_0_avl_0_waitrequest),                              //                         .waitrequest
		.av_begintransfer       (),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                  //              (terminated)
		.av_lock                (),                                                                  //              (terminated)
		.av_chipselect          (),                                                                  //              (terminated)
		.av_clken               (),                                                                  //              (terminated)
		.uav_clken              (1'b0),                                                              //              (terminated)
		.av_debugaccess         (),                                                                  //              (terminated)
		.av_outputenable        (),                                                                  //              (terminated)
		.uav_response           (),                                                                  //              (terminated)
		.av_response            (2'b00),                                                             //              (terminated)
		.uav_writeresponsevalid (),                                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                               //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) apollo_video_processment_unit_0_avalon_master_agent (
		.clk                   (pll_0_outclk1_clk),                                                                                //       clk.clk
		.reset                 (Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (apollo_video_processment_unit_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (apollo_video_processment_unit_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (apollo_video_processment_unit_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (apollo_video_processment_unit_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (apollo_video_processment_unit_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (apollo_video_processment_unit_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                                //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                                 //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                              //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                                          //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                                //          .ready
		.av_response           (),                                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mem_if_ddr3_emif_0_avl_0_agent (
		.clk                     (pll_0_outclk1_clk),                                                 //             clk.clk
		.reset                   (Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mem_if_ddr3_emif_0_avl_0_agent_m0_address),                         //              m0.address
		.m0_burstcount           (mem_if_ddr3_emif_0_avl_0_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (mem_if_ddr3_emif_0_avl_0_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (mem_if_ddr3_emif_0_avl_0_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (mem_if_ddr3_emif_0_avl_0_agent_m0_lock),                            //                .lock
		.m0_readdata             (mem_if_ddr3_emif_0_avl_0_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (mem_if_ddr3_emif_0_avl_0_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (mem_if_ddr3_emif_0_avl_0_agent_m0_read),                            //                .read
		.m0_waitrequest          (mem_if_ddr3_emif_0_avl_0_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (mem_if_ddr3_emif_0_avl_0_agent_m0_writedata),                       //                .writedata
		.m0_write                (mem_if_ddr3_emif_0_avl_0_agent_m0_write),                           //                .write
		.rp_endofpacket          (mem_if_ddr3_emif_0_avl_0_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (mem_if_ddr3_emif_0_avl_0_agent_rp_ready),                           //                .ready
		.rp_valid                (mem_if_ddr3_emif_0_avl_0_agent_rp_valid),                           //                .valid
		.rp_data                 (mem_if_ddr3_emif_0_avl_0_agent_rp_data),                            //                .data
		.rp_startofpacket        (mem_if_ddr3_emif_0_avl_0_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                               //                .channel
		.rf_sink_ready           (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (mem_if_ddr3_emif_0_avl_0_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (mem_if_ddr3_emif_0_avl_0_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (mem_if_ddr3_emif_0_avl_0_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (mem_if_ddr3_emif_0_avl_0_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (mem_if_ddr3_emif_0_avl_0_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_sink_data    (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_data),                //                .data
		.rdata_fifo_src_ready    (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (mem_if_ddr3_emif_0_avl_0_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (49),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo (
		.clk               (pll_0_outclk1_clk),                                                 //       clk.clk
		.reset             (Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mem_if_ddr3_emif_0_avl_0_agent_rf_source_data),                     //        in.data
		.in_valid          (mem_if_ddr3_emif_0_avl_0_agent_rf_source_valid),                    //          .valid
		.in_ready          (mem_if_ddr3_emif_0_avl_0_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (mem_if_ddr3_emif_0_avl_0_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (mem_if_ddr3_emif_0_avl_0_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (mem_if_ddr3_emif_0_avl_0_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	god_bless_apollo_mm_interconnect_0_router router (
		.sink_ready         (apollo_video_processment_unit_0_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (apollo_video_processment_unit_0_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (apollo_video_processment_unit_0_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (apollo_video_processment_unit_0_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (apollo_video_processment_unit_0_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk1_clk),                                                    //       clk.clk
		.reset              (Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_src_ready),                                                     //       src.ready
		.src_valid          (router_src_valid),                                                     //          .valid
		.src_data           (router_src_data),                                                      //          .data
		.src_channel        (router_src_channel),                                                   //          .channel
		.src_startofpacket  (router_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                //          .endofpacket
	);

	god_bless_apollo_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (mem_if_ddr3_emif_0_avl_0_agent_rp_ready),                           //      sink.ready
		.sink_valid         (mem_if_ddr3_emif_0_avl_0_agent_rp_valid),                           //          .valid
		.sink_data          (mem_if_ddr3_emif_0_avl_0_agent_rp_data),                            //          .data
		.sink_startofpacket (mem_if_ddr3_emif_0_avl_0_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (mem_if_ddr3_emif_0_avl_0_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (pll_0_outclk1_clk),                                                 //       clk.clk
		.reset              (Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                              //       src.ready
		.src_valid          (router_001_src_valid),                                              //          .valid
		.src_data           (router_001_src_data),                                               //          .data
		.src_channel        (router_001_src_channel),                                            //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                         //          .endofpacket
	);

	god_bless_apollo_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (pll_0_outclk1_clk),                                                 //       clk.clk
		.reset              (Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                  //      sink.ready
		.sink_channel       (router_src_channel),                                                //          .channel
		.sink_data          (router_src_data),                                                   //          .data
		.sink_startofpacket (router_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_src_valid),                                                  //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                              //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                              //          .valid
		.src0_data          (cmd_demux_src0_data),                                               //          .data
		.src0_channel       (cmd_demux_src0_channel),                                            //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                         //          .endofpacket
	);

	god_bless_apollo_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pll_0_outclk1_clk),                                                 //       clk.clk
		.reset               (Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_src_data),                                                  //          .data
		.src_channel         (cmd_mux_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                              //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                              //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                            //          .channel
		.sink0_data          (cmd_demux_src0_data),                                               //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                         //          .endofpacket
	);

	god_bless_apollo_mm_interconnect_0_cmd_demux rsp_demux (
		.clk                (pll_0_outclk1_clk),                                                 //       clk.clk
		.reset              (Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                              //      sink.ready
		.sink_channel       (router_001_src_channel),                                            //          .channel
		.sink_data          (router_001_src_data),                                               //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                      //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                        //          .endofpacket
		.sink_valid         (router_001_src_valid),                                              //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                         //          .endofpacket
	);

	god_bless_apollo_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (pll_0_outclk1_clk),                                                 //       clk.clk
		.reset               (Apollo_VIdeo_Processment_Unit_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                 //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                 //          .valid
		.src_data            (rsp_mux_src_data),                                                  //          .data
		.src_channel         (rsp_mux_src_channel),                                               //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                              //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                              //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                            //          .channel
		.sink0_data          (rsp_demux_src0_data),                                               //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                         //          .endofpacket
	);

endmodule
